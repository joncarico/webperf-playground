!function(){var __webpack_modules__={"./src/adsninja-video-player-event-helper.js":
/*!***************************************************!*\
  !*** ./src/adsninja-video-player-event-helper.js ***!
  \***************************************************/function(){eval("//\n// Log messages to the console.\nfunction AdsNinjaVideoPlayerEventHelper(){\n\n    this.__arePassiveEventListenersSupported = null;\n}\n\n//\n// Generic throttle for callbacks.\nAdsNinjaVideoPlayerEventHelper.prototype.throttle = function(callback, interval){\n\n    var enableCall = true;\n\n    return function(){\n\n        var values = Array.prototype.slice.call(arguments, 0);\n\n        if(!enableCall){\n\n            return;\n        }\n\n        enableCall = false;\n\n        callback.apply(null, values);\n\n        setTimeout(function(){\n\n            enableCall = true;\n        }, interval);\n    }\n}\n\n//\n// Determines if passive event listeners are supported.\nAdsNinjaVideoPlayerEventHelper.prototype.arePassiveEventListenersSupported = function(){\n\n    if(null !== this.__arePassiveEventListenersSupported){\n\n        return this.__arePassiveEventListenersSupported;\n    }\n\n    /**\n     * From MDN, used to verify if browser has passive capability.\n     *\n     * @see: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener\n     */\n    var passiveSupported = false;\n\n    try {\n\n        var options = {\n            // This function will be called when the browser attempts to access the passive property.\n            get passive(){\n\n                passiveSupported = true;\n\n                return false;\n            }\n        };\n\n        window.addEventListener('test', null, options);\n        window.removeEventListener('test', null, options);\n    }\n    catch(error){\n\n        passiveSupported = false;\n    }\n\n    this.__arePassiveEventListenersSupported = passiveSupported;\n\n    return this.__arePassiveEventListenersSupported;\n}\n\nwindow.AdsNinjaVideoPlayerEventHelper = AdsNinjaVideoPlayerEventHelper;\n\n//# sourceURL=webpack://valstream/./src/adsninja-video-player-event-helper.js?")},"./src/valstream-logger.js":
/*!*********************************!*\
  !*** ./src/valstream-logger.js ***!
  \*********************************/function(){eval("//\n// Log messages to the console.\nfunction ValstreamLogger(){\n\n    this.DEFAULT_MESSAGE_PILL     = 'Valstream';\n    this.DEFAULT_STYLE_PILL       = 'display: inline-block; padding: 1px 4px; border-radius: 3px;';\n    this.DEFAULT_STYLE_PILL_DEBUG = 'background: indigo; color: #fff;';\n    this.DEFAULT_STYLE_PILL_WARN  = 'background: gold; color: #000;';\n    this.DEFAULT_STYLE_PILL_ERROR = 'background: maroon; color: #fff;';\n}\n\n//\n// Returns log data.\nValstreamLogger.prototype.__getLogData = function(data, takeDataSnapshot = true){\n\n    var logData = null;\n\n    if(typeof data === 'object' && Object.keys(data).length !== 0 && data !== null){\n\n        logData = data;\n\n        if(takeDataSnapshot){\n\n            try{\n\n                // To keep current state of data intact.\n                logData = JSON.parse(JSON.stringify(data));\n            }\n            catch(error){\n\n                this.warn(error.message, {\n                    error: error,\n                    data: data,\n                }, false);\n\n                // Circular logic detected.\n                logData = data;\n            }\n        }\n    }\n    else{\n\n        logData = '';\n    }\n\n    return logData;\n}\n\n//\n// Logs to console with default level.\nValstreamLogger.prototype.log = function(message, data = {}, takeDataSnapshot = true){\n\n    var logData = this.__getLogData(data, takeDataSnapshot);\n\n    console.log(\n        `%c${this.DEFAULT_MESSAGE_PILL}`,\n        `${this.DEFAULT_STYLE_PILL} ${this.DEFAULT_STYLE_PILL_DEBUG}`,\n        message,\n        logData\n    );\n}\n\n//\n// Logs to console with info level.\nValstreamLogger.prototype.info = function(message, data = {}, takeDataSnapshot = true){\n\n    this.log(message, data);\n}\n\n//\n// Logs to console with debug level.\nValstreamLogger.prototype.debug = function(message, data = {}, takeDataSnapshot = true){\n\n    var logData = this.__getLogData(data, takeDataSnapshot);\n\n    console.debug(\n        `%c${this.DEFAULT_MESSAGE_PILL}`,\n        `${this.DEFAULT_STYLE_PILL} ${this.DEFAULT_STYLE_PILL_DEBUG}`,\n        message,\n        logData\n    );\n}\n\n//\n// Logs to console with warn level.\nValstreamLogger.prototype.warn = function(message, data = {}, takeDataSnapshot = true){\n\n    var logData = this.__getLogData(data, takeDataSnapshot);\n\n    console.warn(\n        `%c${this.DEFAULT_MESSAGE_PILL}`,\n        `${this.DEFAULT_STYLE_PILL} ${this.DEFAULT_STYLE_PILL_WARN}`,\n        message,\n        logData\n    );\n}\n\n//\n// Logs to console with error level.\nValstreamLogger.prototype.error = function(message, data = {}, takeDataSnapshot = true){\n\n    var logData = this.__getLogData(data, takeDataSnapshot);\n\n    console.error(\n        `%c${this.DEFAULT_MESSAGE_PILL}`,\n        `${this.DEFAULT_STYLE_PILL} ${this.DEFAULT_STYLE_PILL_ERROR}`,\n        message,\n        logData\n    );\n}\n\nwindow.ValstreamLogger = ValstreamLogger;\n\n//# sourceURL=webpack://valstream/./src/valstream-logger.js?")},"./src/valstream-options.js":
/*!**********************************!*\
  !*** ./src/valstream-options.js ***!
  \**********************************/function(){eval("//\n// Options to be provided to Valstream constructor.\nfunction ValstreamOptions(){\n\n    this.biddingManager  = null;\n    this.googleAnalytics = null;\n    this.videoJsLibrary  = null;\n    this.googleLibrary   = null;\n\n    //\n    // biddingManager\n    this.get_biddingManager = function(){\n\n        return this.biddingManager;\n    };\n    this.set_biddingManager = function(value){\n\n        this.biddingManager = value;\n    };\n\n    //\n    // googleAnalytics\n    this.get_googleAnalytics = function(){\n\n        return this.googleAnalytics;\n    };\n    this.set_googleAnalytics = function(value){\n\n        this.googleAnalytics = value;\n    };\n\n    //\n    // videoJsLibrary\n    this.get_videoJsLibrary = function(){\n\n        return this.videoJsLibrary;\n    };\n    this.set_videoJsLibrary = function(value){\n\n        this.videoJsLibrary = value;\n    };\n\n    //\n    // googleLibrary\n    this.get_googleLibrary = function(){\n\n        return this.googleLibrary;\n    };\n    this.set_googleLibrary = function(value){\n\n        this.googleLibrary = value;\n    };\n}\n\nwindow.ValstreamOptions = ValstreamOptions;\n\n//# sourceURL=webpack://valstream/./src/valstream-options.js?")},"./src/valstream-video-player-options.js":
/*!***********************************************!*\
  !*** ./src/valstream-video-player-options.js ***!
  \***********************************************/function(){eval("//\n// Options to be provided to Valstream video player constructor.\nfunction ValstreamVideoPlayerOptions(){\n\n    this.elementId                                    = null;\n    this.playlistVideoUrls                            = null; // TODO: Might be provided with files that are not only MP4, should provide the media type with the link.\n    this.maxAdErrorRetries                            = null;\n    this.maxPrerollAdCount                            = null;\n    this.autoNavTimeInMillisecondsNextVideoPrompt     = null;\n    this.autoNavTimeInMillisecondsNextVideoTransition = null;\n    this.prerollTimeoutInMilliseconds                 = null;\n    this.allowSkipCountdownPause                      = null;\n    this.biddingManager                               = null;\n    this.logger                                       = null;\n    this.eventHelper                                  = null;\n    this.googleAnalytics                              = null;\n    this.videoJsLibrary                               = null;\n    this.googleLibrary                                = null;\n    this.modeLayout                                   = null;\n    this.allowAutoplay                                = null;\n    this.allowAds                                     = null;\n    this.showTitle                                    = null;\n    this.changingTitle                                = null;\n\n    //\n    // elementId\n    this.get_elementId = function(){\n\n        return this.elementId;\n    };\n    this.set_elementId = function(value){\n\n        this.elementId = value;\n    };\n\n    //\n    // playlistVideoUrls\n    this.get_playlistVideoUrls = function(){\n\n        return this.playlistVideoUrls;\n    };\n    this.set_playlistVideoUrls = function(value){\n\n        this.playlistVideoUrls = value;\n    };\n\n    //\n    // playlistVideoUrls\n    this.get_playlist = function(){\n\n        return this.playlist;\n    };\n    this.set_playlist = function(value){\n\n        this.playlist = value;\n    };\n\n    //\n    // maxAdErrorRetries\n    this.get_maxAdErrorRetries = function(){\n\n        return this.maxAdErrorRetries;\n    };\n    this.set_maxAdErrorRetries = function(value){\n\n        this.maxAdErrorRetries = value;\n    };\n\n    //\n    // maxPrerollAdCount\n    this.get_maxPrerollAdCount = function(){\n\n        return this.maxPrerollAdCount;\n    };\n    this.set_maxPrerollAdCount = function(value){\n\n        this.maxPrerollAdCount = value;\n    };\n\n    //\n    // autoNavTimeInMillisecondsNextVideoPrompt\n    this.get_autoNavTimeInMillisecondsNextVideoPrompt = function(){\n\n        return this.autoNavTimeInMillisecondsNextVideoPrompt;\n    };\n    this.set_autoNavTimeInMillisecondsNextVideoPrompt = function(value){\n\n        this.autoNavTimeInMillisecondsNextVideoPrompt = value;\n    };\n\n    //\n    // autoNavTimeInMillisecondsNextVideoTransition\n    this.get_autoNavTimeInMillisecondsNextVideoTransition = function(){\n\n        return this.autoNavTimeInMillisecondsNextVideoTransition;\n    };\n    this.set_autoNavTimeInMillisecondsNextVideoTransition = function(value){\n\n        this.autoNavTimeInMillisecondsNextVideoTransition = value;\n    };\n\n    //\n    // prerollTimeoutInMilliseconds\n    this.get_prerollTimeoutInMilliseconds = function(){\n\n        return this.prerollTimeoutInMilliseconds;\n    };\n    this.set_prerollTimeoutInMilliseconds = function(value){\n\n        this.prerollTimeoutInMilliseconds = value;\n    };\n\n    //\n    // allowSkipCountdownPause\n    this.get_allowSkipCountdownPause = function(){\n\n        return this.allowSkipCountdownPause;\n    };\n    this.set_allowSkipCountdownPause = function(value){\n\n        this.allowSkipCountdownPause = value;\n    };\n\n    //\n    // biddingManager\n    this.get_biddingManager = function(){\n\n        return this.biddingManager;\n    };\n    this.set_biddingManager = function(value){\n\n        this.biddingManager = value;\n    };\n\n    //\n    // logger\n    this.get_logger = function(){\n\n        return this.logger;\n    };\n    this.set_logger = function(value){\n\n        this.logger = value;\n    };\n\n    //\n    // eventHelper\n    this.get_eventHelper = function(){\n\n        return this.eventHelper;\n    };\n    this.set_eventHelper = function(value){\n\n        this.eventHelper = value;\n    };\n\n    //\n    // googleAnalytics\n    this.get_googleAnalytics = function(){\n\n        return this.googleAnalytics;\n    };\n    this.set_googleAnalytics = function(value){\n\n        this.googleAnalytics = value;\n    };\n\n    //\n    // videoJsLibrary\n    this.get_videoJsLibrary = function(){\n\n        return this.videoJsLibrary;\n    };\n    this.set_videoJsLibrary = function(value){\n\n        this.videoJsLibrary = value;\n    };\n\n    //\n    // googleLibrary\n    this.get_googleLibrary = function(){\n\n        return this.googleLibrary;\n    };\n    this.set_googleLibrary = function(value){\n\n        this.googleLibrary = value;\n    };\n\n    //\n    // modeLayout\n    this.get_modeLayout = function(){\n\n        return this.modeLayout;\n    };\n    this.set_modeLayout = function(value){\n\n        this.modeLayout = value;\n    };\n\n    //\n    // allowAutoplay\n    this.get_allowAutoplay = function(){\n\n        return this.allowAutoplay;\n    };\n    this.set_allowAutoplay = function(value){\n\n        this.allowAutoplay = value;\n    };\n\n    //\n    // allowAds\n    this.get_allowAds = function(){\n\n        return this.allowAds;\n    };\n    this.set_allowAds = function(value){\n\n        this.allowAds = value;\n    };\n\n    //\n    // showTitle\n    this.get_showTitle = function(){\n\n        return this.showTitle;\n    };\n    this.set_showTitle = function(value){\n\n        this.showTitle = value;\n    };\n\n    //\n    // changingTitle\n    this.get_changingTitle = function(){\n\n        return this.changingTitle;\n    };\n    this.set_changingTitle = function(value){\n\n        this.changingTitle = value;\n    };\n}\n\nwindow.ValstreamVideoPlayerOptions = ValstreamVideoPlayerOptions;\n\n//# sourceURL=webpack://valstream/./src/valstream-video-player-options.js?")},"./src/valstream-video-player.js":
/*!***************************************!*\
  !*** ./src/valstream-video-player.js ***!
  \***************************************/function(){eval("//\n// Valstream video player.\nfunction ValstreamVideoPlayer(options){\n\n    // Validate options.\n    if(!options.hasOwnProperty('videoJsLibrary')\n        || !options.videoJsLibrary\n        || typeof options.videoJsLibrary !== 'function'\n        || !options.hasOwnProperty('elementId')\n        || !options.elementId\n        || typeof options.elementId !== 'string'\n        || (!options.hasOwnProperty('playlist') && !options.hasOwnProperty('playlistVideoUrls'))\n        || ((options.hasOwnProperty('playlistVideoUrls') && (!options.playlistVideoUrls || !Array.isArray(options.playlistVideoUrls) || options.playlistVideoUrls.length === 0)) && (options.hasOwnProperty('playlist') && (!options.playlist || !Array.isArray(options.playlist) || options.playlist.length === 0)))\n    ){\n\n        throw new Error('Unable to configure Valstream video player, one or more required parameters are missing or invalid.');\n    }\n\n    // Constants\n    this.DEFAULT_AUTO_NAV_TIME_IN_MILLISECONDS_NEXT_VIDEO_PROMPT     = 13 * 1000;\n    this.DEFAULT_AUTO_NAV_TIME_IN_MILLISECONDS_NEXT_VIDEO_TRANSITION = 7 * 1000;\n    this.DEFAULT_PREROLL_TIMEOUT_IN_MILLISECONDS                     = 8000;\n    this.DEFAULT_MAX_AD_ERROR_RETRIES                                = 2;\n    this.DEFAULT_MAX_AD_PREROLL_COUNT                                = 2;\n    this.DEFAULT_ALLOW_SKIP_COUNTDOWN_PAUSE                          = false;\n    this.DEFAULT_SHOW_TITLE                                          = false;\n    this.DEFAULT_CHANGING_TITLE                                      = false;\n    this.DEFAULT_AUTOPLAY                                            = true;\n    this.MODE_LAYOUT_FLUID                                           = 1;\n    this.MODE_LAYOUT_FILL                                            = 2;\n    \n    this.maxAdErrorRetries                            = options.maxAdErrorRetries || this.DEFAULT_MAX_AD_ERROR_RETRIES;\n    this.maxPrerollAdCount                            = options.maxPrerollAdCount || this.DEFAULT_MAX_AD_PREROLL_COUNT;\n    this.autoNavTimeInMillisecondsNextVideoPrompt     = options.autoNavTimeInMillisecondsNextVideoPrompt || this.DEFAULT_AUTO_NAV_TIME_IN_MILLISECONDS_NEXT_VIDEO_PROMPT;\n    this.autoNavTimeInMillisecondsNextVideoTransition = options.autoNavTimeInMillisecondsNextVideoTransition || this.DEFAULT_AUTO_NAV_TIME_IN_MILLISECONDS_NEXT_VIDEO_TRANSITION;\n    this.prerollTimeoutInMilliseconds                 = options.prerollTimeoutInMilliseconds || this.DEFAULT_PREROLL_TIMEOUT_IN_MILLISECONDS;\n    this.allowSkipCountdownPause                      = options.allowSkipCountdownPause || this.DEFAULT_ALLOW_SKIP_COUNTDOWN_PAUSE;\n    this.googleAnalytics                              = options.googleAnalytics;\n    this.videoJsLibrary                               = options.videoJsLibrary;\n    this.biddingManager                               = options.biddingManager;\n    this.googleLibrary                                = options.googleLibrary;\n    this.logger                                       = options.logger || new window.ValstreamLogger();\n    this.eventHelper                                  = options.eventHelper || new window.AdsNinjaVideoPlayerEventHelper();\n    this.__allowAds                                   = (typeof options.allowAds == 'boolean') ? options.allowAds : (options.googleLibrary && typeof options.googleLibrary.ima !== 'undefined' && options.biddingManager && typeof options.biddingManager !== 'undefined');\n    this.__isEnabledAds                               = this.__allowAds; // TODO: Make option.\n    this.modeLayout                                   = options.modeLayout || this.MODE_LAYOUT_FLUID;\n    this.allowAutoplay                                = (typeof options.allowAutoplay == 'boolean') ? options.allowAutoplay : this.DEFAULT_AUTOPLAY;\n    this.isEnabledAutoplay                            = true;\n    this.allowBackgroundPlay                          = false; // TODO: When asked for can play and not pause. Supersedes autoplay check in relevant instances when user clicked play.\n    this.isFirstVideo                                 = true;\n    this.usedSecondAuction                            = false;\n    this.videoAdQueue                                 = [];\n    this.userAllowedPlayingVideos                     = false;\n    this.firstPlay                                    = true;\n    this.showTitle                                    = options.showTitle || this.DEFAULT_SHOW_TITLE;\n    this.changingTitle                                = options.changingTitle || this.DEFAULT_CHANGING_TITLE;\n\n    //\n    // State to track if sticky video has been closed.\n    this.stickyClosed = false;\n\n    //\n    // State to track if video has been in viewport yet.\n    this.intersectedViewport = false;\n\n    //\n    // State to track if an ad is playing.\n    this.adPlaying = false;\n\n    //\n    // State to track number of pre-rolls played.\n    this.prerollCount = 0;\n\n    //\n    // VideoJS instance.\n    this.player  = null;\n\n    //\n    // Tracks the auto navigation feature triggering timeout.\n    this.autoNavTimeout = null;\n\n    //\n    // Tracks the auto next feature triggering timeout.\n    this.autoNextTimeout = null;\n\n    //\n    // Tracks ad error retries.\n    this.adErrorRetries = 0;\n\n    //\n    // Init state of ad display container.\n    this.adDisplayInitialized = false;\n\n    //\n    // Visibility state of player\n    this.isVisible = false;\n\n    //\n    // State to track time on page.\n    this.duration = 0;\n\n    //\n    // State to track time on page when player is visible.\n    this.viewableDuration = 0;\n\n    this.elementId                                   = options.elementId;\n    this.adElement                                   = null;\n    this.videoContainer                              = null;\n    this.videoContainerInner                         = null;\n    this.autoNav                                     = null;\n    this.autoNavNext                                 = null;\n    this.autoNavStay                                 = null;\n    this.video                                       = null;\n    this.playlistVideoUrls                           = options.playlistVideoUrls; // For compatibility.\n    this.playlist                                    = options.playlist;\n    this.videoContainerInnerWidth                    = null;\n    this.videoContainerInnerHeight                   = null;\n    this.adSkipNext                                  = null;\n    this.adSkipButton                                = null;\n    this.adSkipCountdown                             = null;\n    this.googleImaAdManager                          = null;\n    this.adSkipInterval                              = null;\n    this.adSkipCountdownEneabled                     = true;\n    this.titleElement                                = null;\n    this.trackingVideoProgressStarted                = false;\n    this.trackingVideoProgressStartedAfterPrerollAds = false;\n    this.trackingVideoProgressThresholdPassedFirst   = false;\n    this.trackingVideoProgressThresholdPassedSecond  = false;\n    this.trackingVideoProgressThresholdPassedThird   = false;\n    this.trackingVideoProgressSeeked                 = false;\n    this.trackingVideoProgressEnded                  = false;\n    this.adErrorRetriesExhausted                     = false;\n    this.adMuteElement                               = null;\n    this.adVolumeSliderLevelElement                  = null;\n\n    this.__init();\n}\n\n//\n// Renders an ad.\nValstreamVideoPlayer.prototype.renderAd = function(videoUrl, ignoreInAdBreak = false){\n\n    if(!videoUrl){\n\n        this.prerollCount++;\n\n        this.logger.log('No ad to display. ', {\n            videoUrl: videoUrl,\n        });\n\n        this.handleAdDone();\n        return;\n    }\n\n    if(!ignoreInAdBreak && this.player.hasOwnProperty('ads') && 'object' === typeof this.player.ads && this.player.ads.inAdBreak()){\n\n        this.videoAdQueue.push(videoUrl);\n        return;\n    }\n\n    this.prerollCount++;\n\n    // Record unique ad opportunities.\n    this.logToGoogleAnalytics('event', 'VVV', 'VVV_adOpportunity');\n    // this.recordEvent('adOpportunity');\n    this.__renderAd(videoUrl);\n};\n\n//\n// Render ad helper.\nValstreamVideoPlayer.prototype.__renderAd = function(videoUrl){\n\n    if(!videoUrl){\n\n        throw new Error('Invalid URL provided.');\n    }\n\n    this.logger.log('Video ad url. ', {\n        videoUrl: videoUrl,\n    });\n\n    this.player.ima.setContentWithAdTag(null, videoUrl, false);\n    this.player.ima.requestAds();\n};\n\n//\n// Function used to handle click/touch events.\nValstreamVideoPlayer.prototype.handleClickEvent = function(event){\n\n    var target          = event.target;\n    var parent          = target.parentNode;\n    var targetClasses   = Array.from(target.classList);\n    var parentClasses   = Array.from(parent.classList);\n    var targetIsControl = targetClasses.some(function(className){ return className.includes('control'); });\n    var parentIsControl = parentClasses.some(function(className){ return className.includes('control'); });\n    var targetIsIMA     = targetClasses.some((className) => className.includes('ima'));\n\n    // Handle behaviour between IMA vs VJS click/touch handlers.\n    if(!targetIsIMA){\n\n        event.preventDefault();\n    }\n\n    if(targetIsControl || parentIsControl || target === this.autoNavStay){\n\n        // Stop auto nav on any click event.\n        this.cancelAutoNav();\n        this.logToGoogleAnalytics('event', 'VVV', 'VVV_playerEngagement');\n        // this.recordEvent('playerEngagement');\n    }\n\n    // Close player when it's sticky.\n    if(parent.classList.contains('vvv-close-content')){\n\n        this.handleFloatingDisallowed();\n    }\n\n    // Next video.\n    if(target === this.autoNavNext || target.classList.contains('vjs-next-button-control')){\n\n        // this.recordEvent('nextButtonClick');\n        this.playlistNext();\n    }\n\n    // Previous video.\n    if(target.classList.contains('vjs-prev-button-control')){\n\n        // this.recordEvent('previousButtonClick');\n        this.playlistPrevious();\n    }\n\n    // Back 10 seconds.\n    if(target.classList.contains('vjs-skip-backward-control')){\n\n        // this.recordEvent('backwardButtonClick');\n        this.player.currentTime(this.player.currentTime() - 10);\n    }\n\n    // Forward 10 seconds.\n    if(target.classList.contains('vjs-skip-forward-control')){\n\n        // this.recordEvent('forwardButtonClick');\n        this.player.currentTime(this.player.currentTime() + 10);\n    }\n\n    if(parent.classList.contains('vjs-fullscreen-control') || target.classList.contains('vjs-fullscreen-control') || parent.classList.contains('vjs_video_3_ima-fullscreen-div') || target.classList.contains('vjs_video_3_ima-fullscreen-div') || parent.classList.contains('ima-fullscreen-div') || target.classList.contains('ima-fullscreen-div')){\n\n        // this.recordEvent('fullscreenButtonClick');\n        this.cancelAutoNav();\n    }\n\n    if((target.classList.contains('vjs-play-control') && target.classList.contains('vjs-paused')) || (target.classList.contains('vjs-tech') && parent.classList.contains('vjs-paused')) || parent.classList.contains('vjs-big-play-button')){\n\n        this.userAllowedPlayingVideos = true;\n\n        this.logToGoogleAnalytics('event', 'VVV', 'VVV_playButtonClick');\n        this.recordEvent('playButtonClick');\n\n        if(!this.allowAutoplay){\n\n            this.player.muted(false);\n        }\n    }\n\n    if((target.classList.contains('vjs-play-control') && target.classList.contains('vjs-playing')) || (target.classList.contains('vjs-tech') && parent.classList.contains('vjs-playing'))){\n\n        this.userAllowedPlayingVideos = false;\n    }\n};\n\n//\n// Start ad skip countdown.\nValstreamVideoPlayer.prototype.adSkipCountdownStart = function(){\n\n    clearInterval(this.adSkipInterval);\n\n    if(this.adSkipNext && this.adSkipCountdown){\n\n        this.logger.log('Start ad skip.');\n\n        this.adSkipCountdownEneabled   = true;\n        var secondsRemaining           = 5;\n        this.adSkipCountdown.innerHTML = `${secondsRemaining}`;\n        var self                       = this;\n\n        this.adSkipCountdown.classList.add('active');\n\n        // Called every second to change countdown time.\n        this.adSkipInterval = window.setInterval(function(){\n\n            // Different bidders/advertisers will have different thresholds for counting an impression.\n            // If a user skips the ad, especially right after the countdown finishes, it's possible not all tracking events will be fired.\n            // This is ok though.\n\n            // Let countdown continue even when ad is paused depending on config.\n            if(self.allowSkipCountdownPause && !self.adSkipCountdownEneabled){\n\n                // Pause countdown.\n                return;\n            }\n\n            secondsRemaining               -= 1;\n            self.adSkipCountdown.innerHTML = `${secondsRemaining}`;\n\n            if(secondsRemaining < 0){\n\n                clearInterval(self.adSkipInterval);\n                self.adSkipCountdown.classList.remove('active');\n                self.adSkipNext.classList.add('active');\n            }\n        }, 1000);\n    }\n}\n\n//\n// Pause ad skip countdown.\nValstreamVideoPlayer.prototype.adSkipCountdownPause = function(){\n\n    this.adSkipCountdownEneabled = false;\n}\n\n//\n// Resume ad skip countdown.\nValstreamVideoPlayer.prototype.adSkipCountdownResume = function(){\n\n    this.adSkipCountdownEneabled = true;\n}\n\n//\n// Function used to cancel auto navigation.\nValstreamVideoPlayer.prototype.cancelAutoNav = function(){\n\n    this.logger.log('Cancel auto nav.');\n    clearTimeout(this.autoNavTimeout);\n    clearTimeout(this.autoNextTimeout);\n    this.autoNav.classList.remove('active');\n    this.autoNavNext.classList.remove('transition');\n};\n\n//\n// Function used to start auto navigation.\nValstreamVideoPlayer.prototype.startAutoNav = function(){\n\n    if(!this.allowAutoplay){\n\n        return;\n    }\n\n    this.cancelAutoNav();\n\n    this.logger.log('Start auto nav.');\n\n    var self = this;\n\n    this.autoNavTimeout = window.setTimeout(function(){\n\n        if(self.autoNav && self.autoNavNext){\n\n            self.autoNav.classList.add('active');\n            self.autoNavNext.classList.add('transition');\n\n            self.autoNextTimeout = window.setTimeout(function(){\n\n                self.cancelAutoNav();\n\n                self.isFirstVideo = false;\n\n                self.playlistNext();\n                // Restart auto nav after next.\n                self.startAutoNav();\n            }, self.autoNavTimeInMillisecondsNextVideoTransition);\n        }\n    }, self.autoNavTimeInMillisecondsNextVideoPrompt);\n};\n\n//\n// Function used to build player DOM.\nValstreamVideoPlayer.prototype.buildPlayerDom = function(){\n\n    var additionalClasses  = '';\n    additionalClassesTitle = '';\n    var title              = '';\n\n    if((this.playlistVideoUrls && this.playlistVideoUrls.length > 1) || (this.playlist && this.playlist.length > 1)){\n\n        additionalClasses += ' adsninja-video-player-internal-playlist vvv-video-playlist ';\n    }\n\n    if((this.playlist && this.playlist.length > 0)){\n\n        title                      = this.playlist[0]['title'];\n        var additionalClassesTitle = (this.showTitle) ? 'adsninja-video-player-internal-title-active' : 'adsninja-video-player-internal-title-inactive';\n        additionalClasses          += ' adsninja-video-player-internal-with-title ';\n    }\n\n    return `\n        <div class='vvv-video-container ${additionalClasses}'>\n            <div class='vvv-video-modal'>\n                <div class='vvv-video-inner'>\n                    <div class='vvv-modal-close'></div>\n                    <div class='vvv-auto-nav-container'>\n                        <div class='vvv-auto-nav vvv-stay'>WATCH</div>\n                        <div class='vvv-auto-nav vvv-next'>NEXT</div>\n                    </div>\n                    <video \n                        class='vvv-video video-js vjs-default-skin vjs-big-play-centered' \n                        controls \n                        playsinline\n                    >\n                    </video>\n                    <div class='vvv-skip-button'>\n                        <div class='vvv-skip-text'>\n                            <span>Skip Ad</span>\n                        </div>\n                        <div class='vvv-skip-counter'>5</div>\n                    </div>\n                </div>\n            </div>\n            <div class=\"vvv-video-title ${additionalClassesTitle}\">${title}</div>\n        </div>\n    `;\n};\n\n//\n// Function used to observe the player DOM.\nValstreamVideoPlayer.prototype.observePlayer = function(){ // TODO: Switch to waypoints?\n\n    var self = this;\n\n    const handleIntersect = function(entries){\n\n        entries.forEach(function(entry){\n\n            // If video has been in the viewport, we can make it sticky when not intersecting.\n            if(entry.isIntersecting){\n\n                self.isVisible = true;\n\n                // Start playing the video on the first viewport intersection.\n                if(!self.intersectedViewport){\n\n                    self.intersectedViewport = true;\n\n                    if(self.allowAutoplay){\n\n                        self.player.play();\n                        self.startAutoNav();\n                    }\n                }\n                else if(self.isEnabledAds() && self.intersectedViewport && self.adPlaying && self.allowAutoplay){\n\n                    self.player.ima.resumeAd();\n                }\n                else if(self.intersectedViewport && self.allowAutoplay){\n\n                    self.player.play();\n                    self.startAutoNav();\n                }\n            }\n            else if(self.stickyClosed){\n\n                // Need this condition for when not player is not intersecting the window.\n                self.isVisible = false;\n\n                if(self.allowAutoplay){\n\n                    if(self.isEnabledAds() && self.player.ads.inAdBreak()){\n\n                        self.player.ima.pauseAd();\n                    }\n\n                    self.player.pause();\n                    self.cancelAutoNav();\n                }\n            }\n        });\n    };\n\n    var observer = new IntersectionObserver(handleIntersect, {\n        root: null,\n        rootMargin: '0px',\n        threshold: 0.45,\n    });\n\n    observer.observe(this.videoContainer);\n};\n\n//\n// Record events with bidding manager.\nValstreamVideoPlayer.prototype.recordEvent = function(type, message = null, data = null){\n\n    var event = new CustomEvent(`AdsNinjaVideoPlayerEvent`, {\n        bubbles: true,\n        detail: {\n            elementId: this.elementId,\n            type: type,\n            message: message,\n            data: data,\n        },\n    });\n\n    this.adElement.dispatchEvent(event);\n};\n\n//\n// Resume ad skip countdown.\nValstreamVideoPlayer.prototype.logToGoogleAnalytics = function(hitType, eventCategory, eventAction, eventLabel, eventValue){\n\n    if(!this.googleAnalytics){\n\n        return;\n    }\n\n    var gaData = {\n        hitType: hitType,\n        eventCategory: eventCategory,\n        eventAction: eventAction,\n    };\n\n    if(eventLabel){\n\n        gaData['eventLabel'] = eventLabel;\n    }\n\n    if(eventValue){\n\n        gaData['eventValue'] = eventValue;\n    }\n\n    this.googleAnalytics('send', gaData);\n}\n\n//\n// Advance to the next playlist item.\nValstreamVideoPlayer.prototype.playlistNext = function(){\n\n    var playlistItem = this.player.playlist.next();\n};\n\n//\n// Go back to the previous playlist item.\nValstreamVideoPlayer.prototype.playlistPrevious = function(){\n\n    var playlistItem = this.player.playlist.previous();\n};\n\n//\n//\nValstreamVideoPlayer.prototype.setTitle = function(title){\n\n    this.titleElement.innerHTML = title;\n};\n\n//\n// Advance to the next playlist item.\nValstreamVideoPlayer.prototype.playlistNext = function(){\n\n    var playlistItem = this.player.playlist.next();\n\n    if(this.changingTitle && playlistItem){\n\n        this.setTitle(playlistItem['title'] || '');\n    }\n};\n\n//\n// Go back to the previous playlist item.\nValstreamVideoPlayer.prototype.playlistPrevious = function(){\n\n    var playlistItem = this.player.playlist.previous();\n\n    if(this.changingTitle && playlistItem){\n\n        this.setTitle(playlistItem['title'] || '');\n    }\n};\n\n//\n//\nValstreamVideoPlayer.prototype.setTitle = function(title){\n\n    this.titleElement.innerHTML = title;\n};\n\n//\n// Handles floating close button click.\nValstreamVideoPlayer.prototype.handleAdDone = function(){\n\n    if(this.isEnabledAds() && this.player.ads.inAdBreak()){\n\n        this.player.ads.endLinearAdMode();\n    }\n    else if(this.isEnabledAds() && this.player.ads.isWaitingForAdBreak() && !this.player.ads.isContentResuming()){\n\n        this.player.ads.skipLinearAdMode();\n    }\n\n    // Reset ad skip button.\n    this.adSkipCountdown.classList.remove('active');\n    this.adSkipNext.classList.remove('active');\n\n    this.adPlaying = false;\n\n    this.startAutoNav();\n};\n\n//\n// Handles floating close button click.\nValstreamVideoPlayer.prototype.handleFloatingDisallowed = function(){\n\n    this.videoContainerInnerHeight              = 'inherit';\n    this.videoContainerInnerWidth               = 'inherit';\n    this.videoContainerInner.style.width        = 'inherit';\n    this.videoContainer.parentNode.style.height = 'inherit';\n    this.videoContainer.parentNode.style.width  = 'inherit';\n    this.stickyClosed                           = true;\n\n    if(this.allowAutoplay){\n\n        this.player.muted(true);\n        this.player.pause();\n    }\n\n    this.cancelAutoNav();\n\n    // TODO: Could also be isVisibleOrFloating or better yet isInView to help distinguish that tab changes don't effect this value.\n    this.isVisible = false;\n\n    if(this.isEnabledAds() && this.player.ads.inAdBreak() && this.allowAutoplay){\n\n        this.player.ima.pauseAd();\n    }\n\n    this.logToGoogleAnalytics('event', 'VVV', 'VVV_playerClose');\n    // this.recordEvent('playerClose');\n};\n\n//\n// Handles floating disengaged.\nValstreamVideoPlayer.prototype.handleFloatingDisengaged = function(height, width){\n\n    this.videoContainerInnerHeight       = height;\n    this.videoContainerInnerWidth        = width;\n    this.videoContainerInner.style.width = `${this.videoContainerInnerWidth}`;\n};\n\n//\n// Handles floating engaged.\nValstreamVideoPlayer.prototype.handleFloatingEngaged = function(height, width){\n\n    this.videoContainerInnerHeight       = height;\n    this.videoContainerInnerWidth        = width;\n    this.videoContainerInner.style.width = `${this.videoContainerInnerWidth}`;\n};\n\n//\n// Request the next pre-roll ad.\nValstreamVideoPlayer.prototype.tryRenderingVideoAdInQueue = function(){\n\n    if(this.videoAdQueue.length === 0){\n\n        return false;\n    }\n\n    var videoUrl = this.videoAdQueue.shift();\n\n    if(!videoUrl){\n\n        return false;\n    }\n\n    this.renderAd(videoUrl, true);\n\n    return true;\n};\n\n//\n// Handle ad skip.\nValstreamVideoPlayer.prototype.handleAdSkip = function(){\n\n    if(this.googleImaAdManager && typeof this.googleImaAdManager === 'object' && typeof this.googleImaAdManager.stop === 'function'){\n\n        // Whether or not an ad is skippable is determined by the VAST XML that is returned.\n        // Even though all our of settings are configured to set ads as skippable after 5 seconds, not all bidders adhere to this.\n        // Many will still return VAST creatives without a skip option. We use AdManager.stop() instead to force the skipping feature.\n        // The function AdManager.skip() only works if a skip option exists in the VAST XML.\n        this.googleImaAdManager.stop();\n    }\n\n    this.handleAdDone();\n\n    // Render next pre-roll.\n    var hasRenderedVideoAdInQueue = false;\n\n    if(this.prerollCount < this.maxPrerollAdCount){\n\n        hasRenderedVideoAdInQueue = this.tryRenderingVideoAdInQueue();\n\n        if(!hasRenderedVideoAdInQueue){\n\n            this.requestNextPrerollAd(true);\n        }\n    }\n\n    this.logToGoogleAnalytics('event', 'VVV', 'VVV_skipAd');\n    // this.recordEvent('skipAd');\n}\n\n//\n// Request the next pre-roll ad.\nValstreamVideoPlayer.prototype.requestNextPrerollAd = function(ignoreInAdBreak = false){\n\n    this.logger.log('Requesting next pre-roll ad.', {\n        elementId: this.elementId,\n    });\n\n    var videoUrl = this.biddingManager.requestNextPrerollAd(this.elementId);\n\n    if(!videoUrl){\n\n        return;\n    }\n\n    this.logger.log('Received next pre-roll ad.', {\n        elementId: this.elementId,\n        videoUrl: videoUrl,\n    });\n\n    this.renderAd(videoUrl, ignoreInAdBreak);\n};\n\n//\n// Request the next pre-roll ad.\nValstreamVideoPlayer.prototype.requestNextAuctionVideoInstream = function(){\n\n    // Start next auction.\n    this.logger.log('Requesting next auction.', {\n        elementId: this.elementId,\n    });\n\n    var self = this;\n\n    this.biddingManager.requestNextAuctionVideoInstream(this.elementId, function(videoUrl){\n\n        self.renderAd(videoUrl);\n    });\n};\n\n//\n// Enable ads for video player.\nValstreamVideoPlayer.prototype.enableAds = function(){\n\n    this.__isEnabledAds = true;\n};\n\n//\n// Disable ads for video player.\nValstreamVideoPlayer.prototype.disableAds = function(){\n\n    if(this.isEnabledAds() && this.player.ads.inAdBreak()){\n\n        this.player.ads.endLinearAdMode();\n    }\n    else if(this.isEnabledAds() && this.player.ads.isWaitingForAdBreak() && !this.player.ads.isContentResuming()){\n\n        this.player.ads.skipLinearAdMode();\n    }\n\n    this.__isEnabledAds = false;\n};\n\n//\n// Request the next pre-roll ad.\nValstreamVideoPlayer.prototype.isEnabledAds = function(){\n\n    return (this.canSupportPlayingAds() && this.isAllowedToPlayAds() && this.__isEnabledAds);\n};\n\n//\n// Request the next pre-roll ad.\nValstreamVideoPlayer.prototype.isAllowedToPlayAds = function(){\n\n    return this.__allowAds;\n};\n\n//\n// Request the next pre-roll ad.\nValstreamVideoPlayer.prototype.canSupportPlayingAds = function(){\n\n    return (this.googleLibrary && typeof this.googleLibrary.ima !== 'undefined' && this.biddingManager && typeof this.biddingManager !== 'undefined');\n};\n\n//\n// Callback for mark bids as used.\nValstreamVideoPlayer.prototype.markBidAsUsedCallback = function(addSkipButton){\n\n    if(addSkipButton){\n\n        this.adSkipCountdownStart();\n    }\n};\n\n//\n// Callback for user skipping an ad action.\nValstreamVideoPlayer.prototype.adStartCallback = function(adEvent){\n\n    this.logger.log('Ad start event.', {\n        adEvent: adEvent,\n    }, false);\n\n    this.googleImaAdManager.setVolume(0);\n\n    if(!this.player.muted()){\n\n        var volume = this.player.volume();\n\n        this.googleImaAdManager.setVolume(volume);\n        this.adMuteElement.classList.add('ima-non-muted');\n        this.adMuteElement.classList.remove('ima-muted');\n        this.adVolumeSliderLevelElement.style.width = `${volume * 100}%`;\n    }\n\n    this.cancelAutoNav();\n\n    this.adPlaying = true;\n    var ad         = adEvent.getAd();\n\n    if(ad){\n\n        var creativeIds = null;\n\n        if(typeof ad.getWrapperCreativeIds === 'function'){\n\n            creativeIds = ad.getWrapperCreativeIds();\n        }\n\n        this.biddingManager.markBidAsUsed(this.elementId, creativeIds, this.markBidAsUsedCallback.bind(this));\n\n        if(creativeIds && Array.isArray(creativeIds) && creativeIds.length > 0){\n\n            this.logger.log('Marked bids as used.', {\n                adEvent: adEvent,\n            }, false);\n        }\n        else{\n\n            // Unable to retrieve creative IDs needed to mark a bid as used.\n            // Every highest bid will be marked as used to avoid re-using bids.\n            this.logger.log('Unable to access IMA ad info. Marked all highest bids as used.', {\n                adEvent: adEvent,\n            }, false);\n\n            this.logToGoogleAnalytics('event', 'VVV', 'VVV_IMAError', `Unable to access IMA ad info: ${ad}`);\n            // this.recordEvent('interactiveMediaAdsError', 'Unable to access IMA ad info.', {\n            //     ad: ad,\n            // });\n        }\n    }\n\n    // Reset retries.\n    this.adErrorRetries = 0;\n\n    // Run a second auction for more bids on first fill.\n    if(this.prerollCount < this.maxPrerollAdCount && !this.usedSecondAuction){\n\n        this.usedSecondAuction = true;\n\n        // Start next auction.\n        this.requestNextAuctionVideoInstream();\n    }\n};\n\n//\n// Callback for ad completed playing.\nValstreamVideoPlayer.prototype.adCompleteCallback = function(adEvent){\n\n    this.logger.log('Ad complete event.', {\n        adEvent: adEvent,\n    }, false);\n\n    this.handleAdDone();\n\n    var hasRenderedVideoAdInQueue = false;\n\n    if(this.prerollCount < this.maxPrerollAdCount){\n\n        hasRenderedVideoAdInQueue = this.tryRenderingVideoAdInQueue();\n\n        if(!hasRenderedVideoAdInQueue){\n\n            this.requestNextPrerollAd(true);\n        }\n    }\n};\n\n//\n// Callback for user skipping an ad action.\nValstreamVideoPlayer.prototype.adSkipCallback = function(adEvent){\n\n    this.logger.log('Ad skipped event.', {\n        adEvent: adEvent,\n    }, false);\n\n    this.handleAdDone();\n\n    var hasRenderedVideoAdInQueue = false;\n\n    if(this.prerollCount < this.maxPrerollAdCount){\n\n        hasRenderedVideoAdInQueue = this.tryRenderingVideoAdInQueue();\n\n        if(!hasRenderedVideoAdInQueue){\n\n            this.requestNextPrerollAd(true);\n        }\n    }\n};\n\n//\n// Callback for user skipping an ad action.\nValstreamVideoPlayer.prototype.adPauseCallback = function(adEvent){\n\n    this.logger.log('Ad paused event.', {\n        adEvent: adEvent,\n    }, false);\n\n    this.adSkipCountdownPause();\n};\n\n//\n// Callback for user skipping an ad action.\nValstreamVideoPlayer.prototype.adResumeCallback = function(adEvent){\n\n    this.logger.log('Ad resume event.', {\n        adEvent: adEvent,\n    }, false);\n\n    this.adSkipCountdownResume();\n};\n\n//\n// Callback for user closing an ad action.\n// This doesn't seem to be used much if at all.\nValstreamVideoPlayer.prototype.userCloseCallback = function(adEvent){\n\n    this.logger.log('Ad user closed event.', {\n        adEvent: adEvent,\n    }, false);\n\n    this.handleAdDone();\n\n    var hasRenderedVideoAdInQueue = false;\n\n    if(this.prerollCount < this.maxPrerollAdCount){\n\n        hasRenderedVideoAdInQueue = this.tryRenderingVideoAdInQueue();\n\n        if(!hasRenderedVideoAdInQueue){\n\n            this.requestNextPrerollAd(true);\n        }\n    }\n};\n\n//\n// Handles adsManager callback.\nValstreamVideoPlayer.prototype.adsManagerLoadedCallback = function(response) {\n\n    if (!response || typeof response !== 'object' || !response.hasOwnProperty('adsManager')) {\n\n        return;\n    }\n\n    this.googleImaAdManager = response.adsManager;\n\n    if (!this.googleImaAdManager) {\n\n        this.logger.error('Unable to retrieve Google IMA ad manager from event.');\n        return;\n    }\n\n    this.googleImaAdManager.configureAdsManager(this.player, {\n        enablePreloading: true,\n        loadVideoTimeout: this.prerollTimeoutInMilliseconds,\n    });\n\n    // Attach IMA event listeners.\n    this.player.ima.addEventListener(this.googleLibrary.ima.AdEvent.Type.COMPLETE, this.adCompleteCallback.bind(this));\n    this.player.ima.addEventListener(this.googleLibrary.ima.AdEvent.Type.STARTED, this.adStartCallback.bind(this));\n    this.player.ima.addEventListener(this.googleLibrary.ima.AdEvent.Type.SKIPPED, this.adSkipCallback.bind(this));\n    this.player.ima.addEventListener(this.googleLibrary.ima.AdEvent.Type.PAUSED, this.adPauseCallback.bind(this));\n    this.player.ima.addEventListener(this.googleLibrary.ima.AdEvent.Type.RESUMED, this.adResumeCallback.bind(this));\n    this.player.ima.addEventListener(this.googleLibrary.ima.AdEvent.Type.USER_CLOSE, this.userCloseCallback.bind(this));\n\n    this.adMuteElement              = this.videoContainer.querySelector('.vjs_video_3_ima-mute-div');\n    this.adVolumeSliderLevelElement = this.videoContainer.querySelector('.vjs_video_3_ima-slider-level-div');\n}\n\n//\n// Initialization.\nValstreamVideoPlayer.prototype.__init = function(){\n\n    this.adElement = document.getElementById(this.elementId);\n\n    if(!this.adElement){\n\n        this.logger.error(`Unable to setup video player. Cannot find ad element with ID: ${this.elementId}.`);\n\n        return;\n    }\n\n    // Inject video player into target container.\n    this.adElement.innerHTML = this.buildPlayerDom();\n    this.videoContainer      = this.adElement.querySelector('.vvv-video-container');\n\n    if(!this.videoContainer){\n\n        this.logger.error(`Unable to setup video player. Cannot find video container.`);\n\n        return;\n    }\n\n    this.videoContainerInner = this.videoContainer.querySelector('.vvv-video-inner');\n    this.autoNav             = this.videoContainer.querySelector('.vvv-auto-nav-container');\n    this.autoNavNext         = this.videoContainer.querySelector('.vvv-auto-nav.vvv-next');\n    this.autoNavStay         = this.videoContainer.querySelector('.vvv-auto-nav.vvv-stay');\n    this.adSkipCountdown     = this.videoContainer.querySelector(`.vvv-skip-counter`);\n    this.adSkipNext          = this.videoContainer.querySelector(`.vvv-skip-text`);\n    this.adSkipButton        = this.videoContainer.querySelector(`.vvv-skip-button`);\n    this.titleElement        = this.videoContainer.querySelector(`.vvv-video-title`)\n    this.video               = this.videoContainer.querySelector('video');\n\n    if(!this.videoContainerInner || !this.autoNav || !this.autoNavNext || !this.video){\n\n        this.logger.error(`Unable to setup video player. Cannot find one or more video container elements.`, {\n            videoContainerInner: this.videoContainerInner,\n            autoNav: this.autoNav,\n            autoNavNext: this.autoNavNext,\n            video: this.video,\n        });\n\n        return;\n    }\n\n    var self = this;\n\n    // Init videojs.\n    this.player = this.videoJsLibrary(this.video, {\n        muted: true,\n        autoplay: false,\n        fluid: (this.MODE_LAYOUT_FLUID === this.modeLayout),\n        fill: (this.MODE_LAYOUT_FILL === this.modeLayout),\n        responsive: true,\n        controls: true,\n        aspectRatio: '16:9'\n    }, function(){\n\n        var player = this;\n\n        if(self.isAllowedToPlayAds()){\n\n            // Important to initialize IMA soon after videoJS.\n            player.ima({\n                debug: true,\n                prerollTimeout: self.prerollTimeoutInMilliseconds + 500,\n            });\n\n            // Ads rendering settings.\n            // Event will fire constantly. Event listeners need to be re-defined each time.\n            player.on('ads-manager', self.adsManagerLoadedCallback.bind(self));\n        }\n        else{\n\n            self.disableAds();\n\n            self.logger.warn('Unable to initialize IMA.', {\n                player: player,\n            }, false);\n        }\n\n        // Add additional controls to videoJS.\n        var volumePanel           = player.controlBar.getChild('VolumePanel');\n        var fullscreenToggle      = player.controlBar.getChild('FullscreenToggle');\n        var fullscreenToggleIndex = player.controlBar.children().indexOf(fullscreenToggle);\n        var volumePanelIndex      = player.controlBar.children().indexOf(volumePanel);\n        var nextButton            = player.controlBar.addChild('button', {}, volumePanelIndex);\n        var prevButton            = player.controlBar.addChild('button', {}, volumePanelIndex);\n        var skipForwardButton     = player.controlBar.addChild('button', {}, fullscreenToggleIndex);\n        var skipBackButton        = player.controlBar.addChild('button', {}, fullscreenToggleIndex);\n\n        prevButton.addClass('vjs-prev-button-control');\n        prevButton.addClass('vjs-nav-button-control');\n        nextButton.addClass('vjs-next-button-control');\n        nextButton.addClass('vjs-nav-button-control');\n        skipBackButton.addClass('vjs-skip-backward-control');\n        skipBackButton.addClass('vjs-skip-button-control');\n        skipForwardButton.addClass('vjs-skip-forward-control');\n        skipForwardButton.addClass('vjs-skip-button-control');\n\n        // Attach event listeners.\n        self.videoContainer.addEventListener('click', function(event){\n\n            self.handleClickEvent(event);\n        });\n\n        self.videoContainer.addEventListener('touchend', function(event){\n\n            self.handleClickEvent(event);\n        });\n\n        // Stop the current ad playing and return to content.\n        self.adSkipButton.addEventListener('click', function(event){\n\n            self.handleAdSkip();\n        });\n\n        // Stop the current ad playing and return to content.\n        self.adSkipButton.addEventListener('touchend', function(event){\n\n            event.preventDefault();\n\n            self.handleAdSkip();\n        });\n\n        // Track time on page.\n        window.setInterval(function(){\n            // TODO: Maybe refactor with waypoints.\n\n            if(self.intersectedViewport){\n\n                self.duration += 1;\n\n                if(self.isVisible){\n\n                    self.viewableDuration += 1;\n                }\n            }\n        }, 1000);\n\n        window.addEventListener('beforeunload', function(){\n\n            self.logToGoogleAnalytics('event', 'VVV', 'VVV_duration', '', self.duration);\n            // self.recordEvent('duration', '', {\n            //     duration: self.duration,\n            // });\n            self.logToGoogleAnalytics('event', 'VVV', 'VVV_viewableDuration', '', self.viewableDuration);\n            // self.recordEvent('viewableDuration', '', {\n            //     viewableDuration: self.viewableDuration,\n            // });\n        });\n\n        // When user leaves the tab.\n        // Value of isVisible is always true unless the player is closed.\n        document.addEventListener('visibilitychange', function(){\n\n            if(!self.allowAutoplay){\n\n                return;\n            }\n\n            if(self.isVisible && document.visibilityState === 'visible' && self.adPlaying && self.isEnabledAds()){\n\n                self.player.ima.resumeAd();\n            }\n            else if(self.isVisible && document.visibilityState === 'visible'){\n\n                self.player.play();\n                self.startAutoNav();\n            }\n            else if(self.isVisible){\n\n                self.player.pause();\n                self.cancelAutoNav();\n\n                if(self.isEnabledAds() && self.player.ads.inAdBreak()){\n\n                    self.player.ima.pauseAd();\n                }\n            }\n        });\n\n        player.on('adtimeout', function(event){\n\n            self.logger.log('Ad timeout.', {\n                event: event,\n            }, false);\n\n            self.handleAdDone();\n        });\n\n        player.on('error', function(event){\n\n            self.cancelAutoNav();\n\n            self.logger.log('Error.', {\n                event: event,\n            }, false);\n\n            // Sample 5% of errors\n            var sampleErrors = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n\n            if(sampleErrors < 6){\n\n                var message      = 'Unknown error.';\n                var eventMessage = event.message;\n\n                self.logToGoogleAnalytics('event', 'VVV', 'VVV_adError', eventMessage || message);\n                // self.recordEvent('adError', '', {\n                //     message: eventMessage || message,\n                // });\n            }\n\n            // Skip to next video on video playback errors.\n            self.playlistNext();\n        });\n\n        //\n        // If some ad error occurs while trying to play an ad, retry up to 3 times to play a different ad.\n        player.on('adserror', function(event){\n\n            self.cancelAutoNav();\n\n            self.logger.log('Ads error.', {\n                event: event,\n            }, false);\n\n            if(typeof event.getAd === 'function'){\n\n                self.logger.log('Ads error.', {\n                    ad: event.getAd(),\n                }, false);\n            }\n\n            // Sample 5% of errors\n            var sampleErrors = Math.floor(Math.random() * (100 - 1 + 1) + 1);\n\n            if(sampleErrors < 6){\n\n                var errorMessage = 'Unable to determine error message.';\n\n                if(event.hasOwnProperty('data') && event.data.hasOwnProperty('AdError') && typeof event.data.AdError.getInnerError === 'function'){\n\n                    errorMessage = event.data.AdError.getInnerError();\n                }\n\n                self.logToGoogleAnalytics('event', 'VVV', 'VVV_adError', errorMessage);\n                // self.recordEvent('adError', '', {\n                //     message: errorMessage,\n                // });\n            }\n\n            self.logger.log(`Ads error, attempting to retry. Retry count: ${self.adErrorRetries}.`, {\n                retryCount: self.adErrorRetries,\n                event: event,\n            }, false);\n\n            var bidsAvailable = true;\n\n            if(event.hasOwnProperty('data') && event.data.hasOwnProperty('AdError') && typeof event.data.AdError.getErrorCode === 'function'){\n\n                bidsAvailable = (event.data.AdError.getErrorCode() !== 1009);\n            }\n\n            // Don't keep retrying when no VAST response returned. Cuts down on GAM requests.\n            if(self.adErrorRetries < self.maxAdErrorRetries && bidsAvailable){\n\n                // Retry ad rendering.\n                var videoUrl = self.biddingManager.retryPrerollAd(self.elementId);\n\n                self.logger.log('Retrying pre-roll ad.', {\n                    elementId: self.elementId,\n                    adErrorRetries: self.adErrorRetries,\n                    videoUrl: videoUrl,\n                });\n\n                self.adErrorRetries += 1;\n\n                if(videoUrl){\n\n                    self.__renderAd(videoUrl);\n                }\n            }\n            else{\n\n                self.adPlaying               = false;\n                self.adErrorRetriesExhausted = true;\n\n                // If in-view or user has clicked the player in a non-autoplay setting.\n                if((self.intersectedViewport && self.allowAutoplay) || (self.userAllowedPlayingVideos && !self.allowAutoplay)){\n\n                    self.player.play();\n                    self.startAutoNav();\n                }\n            }\n        });\n\n        // Whenever a new video starts playing, restart the auto nav process and auction.\n        player.on('loadstart', function(){\n\n            // TODO: Maybe check if you can play ads here with by checking existence of \"player.ima\" and \"player.ads\".\n\n            self.cancelAutoNav();\n\n            self.adErrorRetriesExhausted = false;\n            self.prerollCount            = 0;\n            self.adErrorRetries          = 0; // Reset retries.\n\n            if(self.isAllowedToPlayAds() && !self.adDisplayInitialized && self.player.hasOwnProperty('ima') && typeof self.player.ima.initializeAdDisplayContainer === 'function'){\n\n                self.adDisplayInitialized = true;\n\n                self.player.ima.initializeAdDisplayContainer();\n            }\n\n            if((self.isEnabledAds() && self.allowAutoplay) || (!self.allowAutoplay && !self.firstPlay)){\n\n                // Start next auction.\n                self.requestNextAuctionVideoInstream(self.elementId);\n            }\n\n            // Rest video progress when new video loaded.\n            self.trackingVideoProgressStarted                = false;\n            self.trackingVideoProgressStartedAfterPrerollAds = false;\n            self.trackingVideoProgressThresholdPassedFirst   = false;\n            self.trackingVideoProgressThresholdPassedSecond  = false;\n            self.trackingVideoProgressThresholdPassedThird   = false;\n            self.trackingVideoProgressEnded                  = false;\n        });\n\n        var handleTime = self.eventHelper.throttle(function(event){\n\n            var currentTime = player.currentTime();\n\n            // TODO: Why is play event here?\n            // if(!self.trackingVideoProgressStarted && currentTime >= 1.5){\n            //\n            //     self.trackingVideoProgressStarted = true;\n            //\n            //     self.logToGoogleAnalytics('event', 'VVV', 'VVV_videoStarted');\n            //     self.recordEvent('videoStarted');\n            // }\n\n            if(!self.trackingVideoProgressThresholdPassedFirst && currentTime >= 15){\n\n                self.trackingVideoProgressThresholdPassedFirst = true;\n\n                self.logToGoogleAnalytics('event', 'VVV', 'VVV_videoPlay15');\n                self.recordEvent('videoPlay15');\n            }\n\n            if(!self.trackingVideoProgressThresholdPassedSecond && currentTime >= 30){\n\n                self.trackingVideoProgressThresholdPassedSecond = true;\n\n                self.logToGoogleAnalytics('event', 'VVV', 'VVV_videoPlay30');\n                self.recordEvent('videoPlay30');\n            }\n\n            if(!self.trackingVideoProgressThresholdPassedThird && currentTime >= 60){\n\n                self.trackingVideoProgressThresholdPassedThird = true;\n\n                self.logToGoogleAnalytics('event', 'VVV', 'VVV_videoPlay60');\n                self.recordEvent('videoPlay60');\n            }\n\n        }, 5000);\n\n        // Whenever a new video time updates.\n        player.on('timeupdate', handleTime);\n\n        player.on('ended', function(){\n\n            self.logToGoogleAnalytics('event', 'VVV', 'VVV_videoEnded');\n            // self.recordEvent('videoEnded');\n        });\n\n        player.on('playing', function(){\n\n            // Only log once and only after ad break is confirmed to be done.\n            if(!self.trackingVideoProgressStartedAfterPrerollAds && ((self.isAllowedToPlayAds() && self.prerollCount === self.maxPrerollAdCount) || !self.isAllowedToPlayAds() || self.adErrorRetriesExhausted)){\n\n                self.trackingVideoProgressStartedAfterPrerollAds = true;\n\n                // self.logToGoogleAnalytics('event', 'VVV', 'VVV_videoStartedAfterPrerollAds');\n                // self.recordEvent('videoStartedAfterPrerollAds');\n            }\n        });\n\n        // Play handler.\n        player.on('play', function(){\n\n            // For players that can't auto play we'll need to request it's first ad.\n            if(self.isEnabledAds() && !self.allowAutoplay && self.firstPlay){\n\n                // Start next auction.\n                self.requestNextAuctionVideoInstream(self.elementId);\n            }\n\n            self.firstPlay = false;\n        });\n\n        var playlistVideos = [];\n\n        if(self.playlistVideoUrls && self.playlistVideoUrls.length > 0){\n\n            // Set video playlist.\n            playlistVideos = self.playlistVideoUrls.map(function(url){\n\n                return {\n                    controls: true,\n                    sources: [\n                        {\n                            src: url,\n                            type: 'video/mp4',\n                        },\n                    ],\n                }\n            });\n        }\n        else{\n\n            for(var p in self.playlist){\n\n                var playlistItem = {\n                    controls: true,\n                    sources: [\n                        {\n                            src: self.playlist[p]['url'],\n                            type: self.playlist[p]['mimeType'] || 'video/mp4',\n                        },\n                    ],\n                    title: self.playlist[p]['title'] || '',\n                };\n\n                // Add posters when needed.\n                if(self.playlist[p].hasOwnProperty('thumbnailLink') && self.playlist[p]['thumbnailLink']){\n\n                    playlistItem['poster'] = self.playlist[p]['thumbnailLink'];\n                }\n\n                playlistVideos.push(playlistItem);\n            }\n        }\n\n        player.playlist(playlistVideos);\n\n        if(self.allowAutoplay){\n\n            player.playlist.autoadvance(1);\n        }\n\n        // Repeat when the end is reached.\n        player.playlist.repeat(true);\n    });\n\n    if(this.isAllowedToPlayAds()){\n\n        // Register events handlers for floating.\n        this.biddingManager.registerEventHandlersForFloating(this.elementId, {\n            engaged: function(height, width){\n\n                self.handleFloatingEngaged(height, width);\n            },\n            disengaged: function(height, width){\n\n                self.handleFloatingDisengaged(height, width);\n            },\n            disallowed: function(){\n\n                self.handleFloatingDisallowed();\n            },\n        });\n    }\n\n    // Attach intersection observer for sticky functionality.\n    this.observePlayer();\n};\n\nwindow.ValstreamVideoPlayer = ValstreamVideoPlayer;\n\n//# sourceURL=webpack://valstream/./src/valstream-video-player.js?")},"./src/valstream.js":
/*!**************************!*\
  !*** ./src/valstream.js ***!
  \**************************/function(){eval("//\n// Valstream video player.\nfunction Valstream(options){\n\n    // Validate options.\n    if(!options.hasOwnProperty('videoJsLibrary')\n        || !options.videoJsLibrary\n        || typeof options.videoJsLibrary !== 'function'\n    ){\n\n        throw new Error('Unable to configure Valstream, one or more required parameters are missing or invalid.');\n    }\n\n    this.__biddingManager                   = options.biddingManager || null;\n    this.__googleAnalytics                  = options.googleAnalytics || null;\n    this.__videoJsLibrary                   = options.videoJsLibrary;\n    this.__googleLibrary                    = options.googleLibrary || null;\n    this.__logger                           = new window.ValstreamLogger();\n    this.__eventHelper                      = new window.AdsNinjaVideoPlayerEventHelper();\n    this.__videoPlayers                     = {};\n    this.__registeredBiddingManagerHandlers = false;\n\n    // TODO: Would maybe need if we move back to TS/Modules approach.\n    // window.videojs.registerPlugin('ads', window.videojsContribAds);\n    // window.videojs.registerPlugin('videojsPlaylist', window.videojsPlaylist);\n}\n\n//\n// Builds a video player.\nValstream.prototype.configureVideoPlayer = function(options){\n\n    if(this.__videoPlayers.hasOwnProperty(options.elementId)){\n\n        throw new Error(`Valstream video player already configured for element with ID: ${options.elementId}.`);\n    }\n\n    try{\n\n        var videoPlayerOptions = new window.ValstreamVideoPlayerOptions();\n        videoPlayerOptions.set_elementId(options.elementId);\n        videoPlayerOptions.set_playlistVideoUrls(options.playlistVideoUrls || null); // For compatibility keep this option.\n        videoPlayerOptions.set_playlist(options.playlist || null);\n        videoPlayerOptions.set_maxAdErrorRetries(options.maxAdErrorRetries || null);\n        videoPlayerOptions.set_maxPrerollAdCount(options.maxPrerollAdCount || null);\n        videoPlayerOptions.set_autoNavTimeInMillisecondsNextVideoPrompt(options.autoNavTimeInMillisecondsNextVideoPrompt || null);\n        videoPlayerOptions.set_autoNavTimeInMillisecondsNextVideoTransition(options.autoNavTimeInMillisecondsNextVideoTransition || null);\n        videoPlayerOptions.set_prerollTimeoutInMilliseconds(options.prerollTimeoutInMilliseconds || null);\n        videoPlayerOptions.set_modeLayout(options.modeLayout || null);\n        videoPlayerOptions.set_allowAutoplay((typeof options.allowAutoplay === 'boolean') ? options.allowAutoplay : null);\n        videoPlayerOptions.set_showTitle((typeof options.showTitle === 'boolean') ? options.showTitle : null);\n        videoPlayerOptions.set_allowAds((typeof options.allowAds === 'boolean') ? options.allowAds : null);\n        videoPlayerOptions.set_biddingManager(this.__biddingManager);\n        videoPlayerOptions.set_logger(this.__logger);\n        videoPlayerOptions.set_googleAnalytics(this.__googleAnalytics);\n        videoPlayerOptions.set_videoJsLibrary(this.__videoJsLibrary);\n        videoPlayerOptions.set_googleLibrary(this.__googleLibrary);\n\n        this.__videoPlayers[options.elementId] = new window.ValstreamVideoPlayer(videoPlayerOptions);\n\n        return this.__videoPlayers[options.elementId];\n    }\n    catch(error){\n\n        this.__logger.error(error.message);\n    }\n}\n\n//\n// Sets up video players for zones specified by a bidding manager.\nValstream.prototype.configureBiddingManagerVideoPlayers = function(){\n\n    // Get all video players from biddingManager.\n    var videoPlayerConfigs = this.__biddingManager.getVideoPlayerConfigurations();\n\n    // Create video players.\n    for(var x in videoPlayerConfigs){\n\n        if(this.__videoPlayers.hasOwnProperty(videoPlayerConfigs[x].elementId)){\n\n            continue;\n        }\n\n        if(!document.getElementById(videoPlayerConfigs[x].elementId)){\n\n            this.__logger.warn(`Unable to setup video player. Cannot find ad element with ID: ${videoPlayerConfigs[x].elementId}.`);\n\n            continue;\n        }\n\n        videoPlayerConfigs[x]['allowAds'] = true;\n\n        this.configureVideoPlayer(videoPlayerConfigs[x]);\n    }\n\n    // Register configure new video player handler.\n    if(!this.__registeredBiddingManagerHandlers && typeof this.__biddingManager.registerConfigureNewVideoPlayersHandler === 'function'){\n\n        var self = this;\n\n        this.__biddingManager.registerConfigureNewVideoPlayersHandler(function(){\n\n            self.configureBiddingManagerVideoPlayers();\n        });\n\n        this.__registeredBiddingManagerHandlers = true;\n    }\n}\n\nwindow.Valstream = Valstream;\n\n//# sourceURL=webpack://valstream/./src/valstream.js?")}},__webpack_exports__=(__webpack_modules__["./src/adsninja-video-player-event-helper.js"](),__webpack_modules__["./src/valstream-logger.js"](),__webpack_modules__["./src/valstream-options.js"](),__webpack_modules__["./src/valstream-video-player-options.js"](),__webpack_modules__["./src/valstream-video-player.js"](),{});__webpack_modules__["./src/valstream.js"]()}();